// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Upload {
  id              String   @id @default(cuid())
  filename        String
  upload_date     DateTime
  total_products  Int
  job_type        JobType  @default(product_texts)
  products        Product[]
  batches         ProductBatch[]
  ui_items        UIItem[]
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

model ProductBatch {
  id              String   @id @default(cuid())
  upload_id       String
  filename        String
  upload_date     DateTime
  total_products  Int
  status          ProductBatchStatus
  job_type        JobType  @default(product_texts)
  products        Product[]
  ui_items        UIItem[]
  upload          Upload   @relation(fields: [upload_id], references: [id])
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

model Product {
  id              String        @id @default(cuid())
  upload_id       String
  batch_id        String?
  name_sv         String
  description_sv  String
  attributes      String?
  tone_hint       String?
  optimized_sv    String?
  translated_da   String?
  translated_no   String?
  status          ProductStatus
  error_message   String?
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  
  upload          Upload        @relation(fields: [upload_id], references: [id])
  batch           ProductBatch? @relation(fields: [batch_id], references: [id])
}

enum ProductBatchStatus {
  pending
  running
  completed
  error
}

model UIItem {
  id              String   @id @default(cuid())
  upload_id       String
  batch_id        String?
  name            String
  values          String   // JSON string containing locale values
  status          UIItemStatus @default(pending)
  error_message   String?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  
  upload          Upload        @relation(fields: [upload_id], references: [id])
  batch           ProductBatch? @relation(fields: [batch_id], references: [id])
}

enum JobType {
  product_texts
  ui_strings
}

enum UIItemStatus {
  pending
  processing
  completed
  error
}

enum ProductStatus {
  pending
  optimizing
  optimized
  translating
  completed
  error
}
