// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Upload {
  id              String   @id @default(cuid())
  filename        String
  upload_date     DateTime
  total_products  Int
  job_type        JobType  @default(product_texts)
  meta            String?  // JSON string containing upload metadata including tokens
  products        Product[]
  batches         ProductBatch[]
  ui_items        UIItem[]
  brands          Brand[]
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

model ProductBatch {
  id              String   @id @default(cuid())
  upload_id       String
  filename        String
  upload_date     DateTime
  total_products  Int
  status          ProductBatchStatus
  job_type        JobType  @default(product_texts)
  targetLanguages String?  // JSON string containing array of language codes
  products        Product[]
  ui_items        UIItem[]
  brands          Brand[]
  upload          Upload   @relation(fields: [upload_id], references: [id])
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  deleted_at      DateTime?
}

model Product {
  id              String        @id @default(cuid())
  upload_id       String
  batch_id        String?
  name_sv         String
  description_sv  String
  attributes      String?
  tone_hint       String?
  raw_data        String?       // JSON string containing all original Excel columns
  optimized_sv    String?
  translated_da   String?       // Deprecated - use translations field
  translated_nb   String?       // Deprecated - use translations field
  translated_no   String?       // Deprecated - use translations field
  translated_en   String?       // Deprecated - use translations field
  translated_de   String?       // Deprecated - use translations field
  translated_fr   String?       // Deprecated - use translations field
  translated_es   String?       // Deprecated - use translations field
  translated_it   String?       // Deprecated - use translations field
  translated_pt   String?       // Deprecated - use translations field
  translated_nl   String?       // Deprecated - use translations field
  translated_pl   String?       // Deprecated - use translations field
  translated_ru   String?       // Deprecated - use translations field
  translated_fi   String?       // Deprecated - use translations field
  translations    String?       // JSON string containing {langCode: translatedText}
  status          ProductStatus
  error_message   String?
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  
  upload          Upload        @relation(fields: [upload_id], references: [id])
  batch           ProductBatch? @relation(fields: [batch_id], references: [id])
}

enum ProductBatchStatus {
  pending
  running
  completed
  error
}

model UIItem {
  id              String   @id @default(cuid())
  upload_id       String
  batch_id        String?
  name            String
  values          String   // JSON string containing locale values
  status          UIItemStatus @default(pending)
  error_message   String?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  
  upload          Upload        @relation(fields: [upload_id], references: [id])
  batch           ProductBatch? @relation(fields: [batch_id], references: [id])
}

model Brand {
  id              String        @id @default(cuid())
  upload_id       String
  batch_id        String?
  name_sv         String
  description_sv  String
  attributes      String?
  tone_hint       String?
  raw_data        String?       // JSON string containing all original Excel columns
  short_sv        String?       // Short description in Swedish
  long_html_sv    String?       // Long HTML description in Swedish
  translations    String?       // JSON string containing {langCode: {short: string, long_html: string}}
  status          BrandStatus
  error_message   String?
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  
  upload          Upload        @relation(fields: [upload_id], references: [id])
  batch           ProductBatch? @relation(fields: [batch_id], references: [id])
}

enum JobType {
  product_texts
  ui_strings
  brands
}

enum UIItemStatus {
  pending
  processing
  completed
  error
}

enum ProductStatus {
  pending
  optimizing
  optimized
  translating
  completed
  error
}

enum BrandStatus {
  pending
  optimizing
  optimized
  translating
  completed
  error
}

model OpenAISettings {
  id                           String   @id @default(cuid())
  openaiApiKeyEnc              String?  // Encrypted API key
  openaiModel                  String   @default("gpt-4o-mini")
  promptOptimizeSv             String   // Swedish optimization prompt for products
  promptOptimizeBrandsSv       String?  // Swedish optimization prompt for brands
  promptTranslateDirect        String   // Direct translation prompt (deprecated)
  promptNameSv                 String?  // Swedish prompt for name generation
  promptShortDescriptionSv     String?  // Swedish prompt for short description generation
  promptDescriptionHtmlSv      String?  // Swedish prompt for HTML description generation
  promptSeoTitleSv             String?  // Swedish prompt for SEO title generation
  promptSeoDescriptionSv       String?  // Swedish prompt for SEO description generation
  exampleProductImportTokens   String?  // JSON string containing extracted tokens from example file
  exampleBrandsImportTokens    String?  // JSON string containing extracted tokens from brands example file
  translationLanguages         String?  // JSON string containing array of ISO-639-1 language codes
  originalLanguage             String?  // ISO-639-1 language code for original/source language
  glossary                     String?  // JSON string containing glossary entries
  created_at                   DateTime @default(now())
  updated_at                   DateTime @updatedAt
}
